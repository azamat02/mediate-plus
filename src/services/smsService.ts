import { firestore } from '../lib/firebase';
import { collection, addDoc, doc, setDoc, getDoc, query, where, getDocs, orderBy, limit } from 'firebase/firestore';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è Kazinfoteh API
export interface KazinfotehSendRequest {
  from: string;           // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–µ–Ω–¥–µ—Ä) —Å–º—Å —Å–æ–æ–±—â–µ–Ω–∏—è (3-17 —Å–∏–º–≤–æ–ª–æ–≤)
  to: string;             // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXX (11-15 —Å–∏–º–≤–æ–ª–æ–≤)
  text: string;           // –¢–µ–∫—Å—Ç —Å–º—Å —Å–æ–æ–±—â–µ–Ω–∏—è (1-1000 —Å–∏–º–≤–æ–ª–æ–≤)
  sent_at?: string;       // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:mm:ss
  extra_id?: string;      // –í–∞—à ID —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
  notify_url?: string;    // URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ (webhook)
  prioritet?: 0 | 1;      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 0 - –æ–±—ã—á–Ω—ã–π, 1 - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π
}

export interface KazinfotehSuccessResponse {
  bulk_id: string;        // ID –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
  message_id: string;     // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
  extra_id: string | null;// –í–∞—à ID, –µ—Å–ª–∏ —É–∫–∞–∑—ã–≤–∞–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ
  to: string;             // –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  sender: string;         // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–µ–Ω–¥–µ—Ä) —Å–æ–æ–±—â–µ–Ω–∏—è
  text: string;           // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  sent_at: string;        // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  done_at: string | null; // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏/–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
  sms_count: string;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS –≤ –¥–ª–∏–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
  priority: string;       // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
  callback_data: string | null;
  status: 'send' | 'sending' | 'sent' | 'delivered' | 'undelivered';
  mnc: '1' | '2' | '77' | '7' | '55'; // –ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  err: string | null;     // –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
}

export interface KazinfotehErrorResponse {
  error_code: number;
  error_message: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è SMS —Å–æ–æ–±—â–µ–Ω–∏—è
export interface SmsMessage {
  id?: string;
  phone: string;
  message: string;
  status: 'pending' | 'sent' | 'failed' | 'delivered' | 'undelivered';
  createdAt: string;
  clientId?: string;
  clientName?: string;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ Kazinfoteh API
  messageId?: string;     // message_id –∏–∑ API
  bulkId?: string;        // bulk_id –∏–∑ API
  smsCount?: number;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS —á–∞—Å—Ç–µ–π
  mnc?: string;           // –ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  sentAt?: string;        // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ API
  doneAt?: string | null; // –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
  error?: string | null;  // –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è OTP –∫–æ–¥–∞
export interface OtpCode {
  phone: string;
  code: string;
  createdAt: string;
  expiresAt: string;
  verified: boolean;
  attempts: number;
}

/**
 * SMS –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Kazinfoteh API
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ SMS –≤ Firestore –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç OTP –∫–æ–¥—ã –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
 */
export class SmsService {
  private static smsCollection = collection(firestore, 'sms_messages');
  private static otpCollection = collection(firestore, 'otp_codes');
  private static BACKEND_API_URL = import.meta.env.VITE_BACKEND_API_URL || 'http://localhost:3001';
  private static OTP_EXPIRY_MINUTES = 5;
  private static MAX_OTP_ATTEMPTS = 3;

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 6-–∑–Ω–∞—á–Ω–æ–≥–æ OTP –∫–æ–¥–∞
   */
  private static generateOtpCode(): string {
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –∫–æ–¥–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * @param phone –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * @returns Promise<{ success: boolean; code?: string }> - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–æ–¥ (–¥–ª—è dev —Ä–µ–∂–∏–º–∞)
   */
  static async sendOtpCode(phone: string): Promise<{ success: boolean; code?: string; error?: string }> {
    try {
      const formattedPhone = this.formatPhone(phone);
      if (!formattedPhone) {
        return { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
      const code = this.generateOtpCode();
      const now = new Date();
      const expiresAt = new Date(now.getTime() + this.OTP_EXPIRY_MINUTES * 60000);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º OTP –≤ Firestore
      const otpData: OtpCode = {
        phone: formattedPhone,
        code,
        createdAt: now.toISOString(),
        expiresAt: expiresAt.toISOString(),
        verified: false,
        attempts: 0
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∫ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
      const otpDocRef = doc(this.otpCollection, formattedPhone.replace(/[^0-9]/g, ''));
      await setDoc(otpDocRef, otpData);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω ${this.OTP_EXPIRY_MINUTES} –º–∏–Ω—É—Ç.\nKelisim.bar`;

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (import.meta.env.DEV) {
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('üì± –û–¢–ü–†–ê–í–ö–ê OTP (DEV MODE)');
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        console.log('–¢–µ–ª–µ—Ñ–æ–Ω:', formattedPhone);
        console.log('–ö–æ–¥:', code);
        console.log('–ò—Å—Ç–µ–∫–∞–µ—Ç:', expiresAt.toLocaleString('ru-RU'));
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:');
        console.log(message);
        console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS —á–µ—Ä–µ–∑ SMSC (—Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–∂–µ –≤ dev —Ä–µ–∂–∏–º–µ)
      const sent = await this.sendSms(formattedPhone, message);

      if (!sent) {
        return { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS' };
      }

      console.log(`[SMS] OTP –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${formattedPhone}`);
      return { success: true };

    } catch (error) {
      console.error('[SMS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ OTP:', error);
      return { success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ OTP –∫–æ–¥–∞
   * @param phone –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * @param code –í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥
   * @returns Promise<{ valid: boolean; error?: string }>
   */
  static async verifyOtpCode(phone: string, code: string): Promise<{ valid: boolean; error?: string }> {
    try {
      const formattedPhone = this.formatPhone(phone);
      if (!formattedPhone) {
        return { valid: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' };
      }

      // –ü–æ–ª—É—á–∞–µ–º OTP –∏–∑ Firestore
      const otpDocRef = doc(this.otpCollection, formattedPhone.replace(/[^0-9]/g, ''));
      const otpDoc = await getDoc(otpDocRef);

      if (!otpDoc.exists()) {
        return { valid: false, error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥' };
      }

      const otpData = otpDoc.data() as OtpCode;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      if (otpData.attempts >= this.MAX_OTP_ATTEMPTS) {
        return { valid: false, error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥' };
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
      const now = new Date();
      const expiresAt = new Date(otpData.expiresAt);
      if (now > expiresAt) {
        return { valid: false, error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥' };
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
      await setDoc(otpDocRef, {
        ...otpData,
        attempts: otpData.attempts + 1
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
      if (otpData.code !== code) {
        const attemptsLeft = this.MAX_OTP_ATTEMPTS - (otpData.attempts + 1);
        return {
          valid: false,
          error: attemptsLeft > 0
            ? `–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${attemptsLeft}`
            : '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥'
        };
      }

      // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
      await setDoc(otpDocRef, {
        ...otpData,
        verified: true,
        attempts: otpData.attempts + 1
      });

      console.log(`[SMS] OTP –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${formattedPhone}`);
      return { valid: true };

    } catch (error) {
      console.error('[SMS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ OTP:', error);
      return { valid: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ –Ω–∞—à Backend API (–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Kazinfoteh)
   * @private
   */
  private static async sendViaBackend(
    phone: string,
    message: string
  ): Promise<{
    success: boolean;
    data?: KazinfotehSuccessResponse;
    error?: string
  }> {
    try {
      const originator = import.meta.env.VITE_KAZINFOTEH_ORIGINATOR || 'KiT_Notify';

      console.log('[SMS] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Backend API:', {
        url: `${this.BACKEND_API_URL}/api/sms/send`,
        to: phone,
        from: originator
      });

      const response = await fetch(`${this.BACKEND_API_URL}/api/sms/send`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          phone: phone,
          message: message,
          originator: originator
        })
      });

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç
      const responseData = await response.json();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
      if (!response.ok || !responseData.success) {
        console.error('[SMS] ‚ùå –û—à–∏–±–∫–∞ Backend API:', responseData);
        return {
          success: false,
          error: responseData.error?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS'
        };
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç backend –≤ —Ñ–æ—Ä–º–∞—Ç KazinfotehSuccessResponse
      const backendData = responseData.data;
      const successResponse: KazinfotehSuccessResponse = {
        message_id: backendData.messageId,
        bulk_id: backendData.bulkId,
        status: backendData.status,
        to: backendData.to,
        sender: backendData.sender,
        text: backendData.text,
        sent_at: backendData.sentAt,
        done_at: backendData.doneAt,
        sms_count: backendData.smsCount?.toString() || '1',
        priority: backendData.priority?.toString() || '0',
        mnc: backendData.mnc || '1',
        extra_id: null,
        callback_data: null,
        err: backendData.error || null
      };

      console.log('[SMS] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Backend API:', {
        message_id: successResponse.message_id,
        status: successResponse.status,
        sms_count: successResponse.sms_count,
        mnc: successResponse.mnc
      });

      return {
        success: true,
        data: successResponse
      };
    } catch (error) {
      console.error('[SMS] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ—Ä–µ–∑ Backend:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Kazinfoteh API
   * @param phone –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX
   * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param clientId ID –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param clientName –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  static async sendSms(
    phone: string,
    message: string,
    clientId?: string,
    clientName?: string
  ): Promise<boolean> {
    try {
      const formattedPhone = this.formatPhone(phone);
      if (!formattedPhone) {
        console.error('[SMS] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', phone);
        return false;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å SMS –≤ Firestore (—É–±–∏—Ä–∞–µ–º undefined –ø–æ–ª—è)
      const smsData: any = {
        phone: formattedPhone,
        message,
        status: 'pending',
        createdAt: new Date().toISOString()
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
      if (clientId) smsData.clientId = clientId;
      if (clientName) smsData.clientName = clientName;

      const docRef = await addDoc(this.smsCollection, smsData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–∞—à Backend API
      console.log('[SMS] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Backend API...');
      const result = await this.sendViaBackend(formattedPhone, message);

      if (result.success && result.data) {
        const apiData = result.data;

        console.log('[SMS] ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Kazinfoteh, ID:', apiData.message_id);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API
        const { updateDoc } = await import('firebase/firestore');
        const smsDoc = doc(this.smsCollection, docRef.id);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è undefined –∑–Ω–∞—á–µ–Ω–∏—è
        const updateData: any = {
          status: apiData.status,           // –ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ API
          messageId: apiData.message_id,    // ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ API
          smsCount: parseInt(apiData.sms_count), // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS —á–∞—Å—Ç–µ–π
          mnc: apiData.mnc,                 // –ö–æ–¥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
          sentAt: apiData.sent_at           // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑ API
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        if (apiData.bulk_id !== undefined) updateData.bulkId = apiData.bulk_id;
        if (apiData.done_at !== undefined) updateData.doneAt = apiData.done_at;
        if (apiData.err !== undefined) updateData.error = apiData.err;

        await updateDoc(smsDoc, updateData);

        return true;
      }

      console.error('[SMS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Kazinfoteh:', result.error);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ failed –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
      const { updateDoc } = await import('firebase/firestore');
      const smsDoc = doc(this.smsCollection, docRef.id);
      await updateDoc(smsDoc, {
        status: 'failed',
        error: result.error
      });

      return false;

    } catch (error) {
      console.error('[SMS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   * @param phone –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä
   * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ null
   */
  private static formatPhone(phone: string): string | null {
    if (!phone) return null;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let formatted = phone.replace(/\D/g, '');

    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏ –¥–ª–∏–Ω–∞ 11 —Ü–∏—Ñ—Ä, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
    if (formatted.startsWith('8') && formatted.length === 11) {
      formatted = '7' + formatted.substring(1);
    }

    // –ï—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω/–†–æ—Å—Å–∏—è)
    if (formatted.length === 10) {
      formatted = '7' + formatted;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    if (formatted.length < 10 || formatted.length > 15) {
      return null;
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å +
    return '+' + formatted;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SMS
   * @param smsId ID SMS –¥–æ–∫—É–º–µ–Ω—Ç–∞
   * @param status –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
   */
  private static async updateSmsStatus(
    smsId: string,
    status: 'pending' | 'send' | 'sending' | 'sent' | 'delivered' | 'undelivered' | 'failed'
  ): Promise<void> {
    try {
      const { doc, updateDoc } = await import('firebase/firestore');
      const smsDoc = doc(this.smsCollection, smsId);
      await updateDoc(smsDoc, { status });
    } catch (error) {
      console.error('[SMS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ SMS:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ SMS –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   * @param clientId ID –∫–ª–∏–µ–Ω—Ç–∞
   * @returns –ú–∞—Å—Å–∏–≤ SMS —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  static async getSmsHistory(clientId: string): Promise<SmsMessage[]> {
    try {
      const { query, where, orderBy, getDocs } = await import('firebase/firestore');

      const q = query(
        this.smsCollection,
        where('clientId', '==', clientId),
        orderBy('createdAt', 'desc')
      );

      const snapshot = await getDocs(q);
      const messages: SmsMessage[] = [];

      snapshot.forEach((doc) => {
        messages.push({
          id: doc.id,
          ...doc.data()
        } as SmsMessage);
      });

      return messages;
    } catch (error) {
      console.error('[SMS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ SMS:', error);
      return [];
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const smsService = SmsService;
